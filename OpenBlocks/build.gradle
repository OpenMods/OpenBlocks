buildscript {
    repositories {
        // General deps
        jcenter()
        mavenCentral()
        // Minecraft Forge
        maven {
            name = 'Forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name 'OpenMods Third Party'
            url 'http://repo.openmods.info/artifactory/simple/thirdparty'
        }
    }


    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'net.thesilkminer.gradle.translationchecker:TranslationChecker:1.1'
    }
}

apply plugin: 'net.minecraftforge.gradle'

//================================================
// Dependencies

dependencies {
    minecraft 'net.minecraftforge:forge:' + forge_version

    compile project(":OpenModsLib") // Load OpenModsLib from submodule

    compile group: 'info.openmods', name: 'calc', version: '0.3'
    compile "info.computercraft:ComputerCraft-API:1.80pr0"
    compile "info.openmods:OpenPeripheralCore-API:" + opc_api_version
}

//================================================
// Jar data

version = mc_version + "-" + mod_version

def String git(String... arguments) {
    def out = new ByteArrayOutputStream()
    exec {
        executable = 'git'
        args = arguments.toList()
        standardOutput = out
    }
    out.toString().trim()
}

def String gitHash() {
    git 'rev-parse', '--short', 'HEAD'
}

def String gitBranch() {
    git 'rev-parse', '--abbrev-ref', 'HEAD'
}

def env = System.getenv()

def in_jenkins = false

def jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins atleast.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
        in_jenkins = true
    } else {
        attributes("Jenkins-Build": "false")
    }
}

def branch = in_jenkins ? env.GIT_BRANCH.minus("origin/") : gitBranch()
def hash = gitHash()

if (branch != null && !branch.equals("master")) {
    version += "-" + branch
}

if (env.BUILD_NUMBER != null) {
    version += "-snapshot-" + env.BUILD_NUMBER
}

def gitManifest = manifest {
    if (branch != null) {
        attributes(
                "Git-Branch": branch,
                "Git-Hash": hash,
                "Implementation-Version": mod_version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
}

evaluationDependsOn ':OpenModsLib'

// Setup Forge plugin
minecraft {
    mappings channel: 'snapshot', version: mcp_mappings

    accessTransformers = [
            file('src/main/resources/META-INF/accesstransformer.cfg'),
            file('../OpenModsLib/src/main/resources/META-INF/accesstransformer.cfg')
    ]

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                openblocks {
                    source sourceSets.main
                }
                openmmods {
                    source project(":OpenModsLib").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'

            mods {
                openblocks {
                    source sourceSets.main
                }
                openmmods {
                    source project(":OpenModsLib").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'openblocks', '--all', '--output', file('src/generated/resources/')
            mods {
                openblocks {
                    source sourceSets.main
                }
                openmods {
                    source project(":OpenModsLib").sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources', 'src/generated/resources']
        }
    }
}

//================================================
// Jar tasks

// Generate FML Coremod manifest
ext.fmlManifest = manifest {
    attributes(
    )
}

if (project.hasProperty('keyStore')) {
    task signJar(type: SignJar, dependsOn: reobfJar) {
        keyStore = project.keyStore
        alias = project.keyStoreAlias
        storePass = project.keyStorePass
        keyPass = project.keyStoreKeyPass

        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }

    build.dependsOn signJar
}

// Merge Jenkins and Git manifests to form final manifest in final release jar
jar {
    manifest {
        from jenkinsManifest, gitManifest, fmlManifest
    }
}

ext.sourcesPath = new File(new File(new File(buildDir, "sources"), "main"), "java")

task apiJar(type: Jar) {
    baseName "OpenBlocks-API"
    version api_version

    from sourceSets.main.output

    include 'openblocks/api/**'

    manifest {
        from jenkinsManifest, gitManifest
    }
}

task apiSrcJar(type: Jar) {
    baseName "OpenBlocks-API"
    version api_version
    classifier 'sources'

    from sourcesPath

    include 'openblocks/api/**'

    manifest {
        from jenkinsManifest, gitManifest
    }
}

artifacts {
    archives apiJar
    archives apiSrcJar
}

task updateTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "openblocks"
    templateFileName = "en_us.lang"
}

task checkTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "openblocks"
    dryRun = true
    templateFileName = "en_us.lang"
}
